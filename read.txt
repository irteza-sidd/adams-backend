way of populating nesting 

  /*
        //ENSURE THE WAY OF POPULATING
        await updatedPost.populate({
            path: 'comments',
            populate: {
                path: 'commentedBy',
                select: 'name' // Specify the fields you want to include
            }
        });
        //POPULATION END
  */


  2)

  
        const updatedPost = await Post.findByIdAndUpdate(
            postId,
            { $addToSet: { comments: comment } }, // Use $addToSet to prevent duplicate likes
            { new: true } // Return the updated document
        ).select('-comments._id -comments.createdAt -comments.updatedAt');

GOOGLE OAUTH APPROACH

/*   
    if (req.body.providor === "GOOGLE") {
           const { googleAccessToken } = req.body;
           axios.get("https://www.googleapis.com/oauth2/v3/userinfo", {
               headers: {
                   "Authorization": `Bearer ${googleAccessToken}`
               }
           })
               .then(async response => {
                   const user = {
                       fullname: response.data.given_name + " " + response.data.family_name,
                       email: response.data.email,
                       image: response.data.picture ? response.data.picture : ""
                   }
                   let existingUser = await User.findOne({ email: user.email });
                   if (existingUser) {
                       const payload = {
                           userId: existingUser._id,
                       };
                       const authToken = jwt.sign(payload, process.env.JWT_SECRET);
                       return res.status(201).send(sendResponse(true, "Successful", { user: existingUser, authToken }));
                   }
                   const googleUser = await User.create({
                       name: user.fullname,
                       email: user.email,
                       image: user.image,
                       loginOrSignupMethod: "SOCIAL",
                       googleId: response.data.sub,
                       providorName: "GOOGLE",
                   })
                   const payload = {
                       userId: googleUser._id,
                   };
                   const authToken = jwt.sign(payload, process.env.JWT_SECRET);
                   res.status(201).send(sendResponse(true, "Successful", { googleUser, authToken }));
               }).catch(err => {
                   res.status(500).json({ success: false, message: err.message });
               })
       }
*/